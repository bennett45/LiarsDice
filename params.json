{"name":"Liars Dice","tagline":"A Game of Lies and Deceit","body":"### Liar's Dice\r\n\r\n###Introduction\r\nLiar's Dice is a classic dice game that deals with guessing and calling your opponents bluffs. This project is to demonstrate an A.I. that can play Liar's Dice Competitively.  \r\n\r\n###Problem\r\nThe basic rules of Liar's Dice are the following. A player takes a guess at how many of a certain dice have been rolled among all the players. The next player has to decide whether to call the players guess or place a new guess.  The round continues until a player calls the previous players guess.  At that point all the dice are counted and whoever is wrong the guesser or the caller loses a dice.  There are a couple problems that Liar's Dice creates when making an A.I. On![fdasfasfd](http://elsoldelaflorida.com/wp-content/uploads/2013/06/google-e1371723033210.jpg)e problem is the randomness in the rolling of the dice. Another problem is the blindness of the player.  Players don't know what the other players have rolled.  The last problem is a player doesn't have to tell the truth.  \r\n\r\n\r\n###Solution\r\nThe project's main goal is to create a playable A.I. that has the potential to be competitive.  To do this I used a modified Monte Carlo Tree Search. The basis behind the Monte Carlo Tree Search is the AI plays out random games and then makes a decision based on the results of those random playouts.  To create this I take the possible moves the A.I. can make and then play out 100 games of each move and then use the move that results in the most wins.  To modify the A.I. I added a +-5% randomness to each win percentage, and it out performed a normal Monte Carlo player significantly. In games against humans, it only won one of four games it played in.  I need a larger sample size to determine if the A.I. is competitive.\r\n\r\n###The Application\r\nThe application is a very simple WPF app is written in C#.  It uses my Liar's Dice library posted [here] (https://bitbucket.org/bennett45/ldlib).  In order to run my tests, I also created a simple console app that uses my Liar's Dice library.  That console application is posted [here](https://bitbucket.org/bennett45/liars-dice-console). To play, you add a human or a computer player and click \"Start\". Then follow the prompts to know when to roll or take your turn.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}