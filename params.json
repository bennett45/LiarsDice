{"name":"An A.I. for Liars Dice","tagline":"A Game of Lies and Deceit","body":"### Liar's Dice\r\n\r\n###Introduction\r\nLiar's Dice is a classic dice game that deals with guessing and calling your opponents bluffs. This project is to demonstrate an A.I. that can play Liar's Dice Competitively.  The algorithm demonstrates the use of a modified Monte Carlo Tree Search. The A.I. can play against Humans and other A.I.\r\n\r\n###Problem\r\nThe basic rules of Liar's Dice are the following. A player takes a guess at how many of a certain dice have been rolled among all the players. The next player has to decide whether to call the players guess or place a new guess.  The round continues until a player calls the previous players guess.  At that point all the dice are counted and whoever is wrong the guesser or the caller loses a dice.  There are a couple problems that Liar's Dice creates when making an A.I. One problem is the randomness in the rolling of the dice. Another problem is the blindness of the player.  Players don't know what the other players have rolled.  The last problem is a player doesn't have to tell the truth.  \r\n\r\n\r\n###Approach\r\nThe project's main goal is to create a playable A.I. that has the potential to be competitive.  To do this I created 4 different A.I. each using a different strategy. Then I played the A.I. against each other to determine the best A.I.  The basis for the algorithm is using a Monte Carlo Tree Search. The idea behind the Monte Carlo Tree Search is the AI plays out random games and then makes a decision based on the results of those random playouts.  The different A.I are as follows:\r\n\r\n###Monte \r\nMonte makes decisions entirely using a Monte Carlo Tree Search.  It plays out all possible guess randomly and then chooses the guess with the highest win percentage.  \r\n\r\n###Flex Master Bluff\r\nFlex Master Bluff is an A.I. that bluffs every time it makes a guess.  It takes the amount of the previous guess and adds one to it.  It was supposed to represent a player that bluffed every time it guessed.\r\n\r\n###Fib Maybes\r\nFib Maybes uses a threshold to determine whether he is going to bluff or play like Monte. 70% of the time it will play exactly like Monte and 30% of the time it will bluff.\r\n\r\n###Crazy Monte\r\nCrazy Monte is a modification to Monte that adds a +-5% randomness to each win percentage.  This was to hopefully get the A.I. to make moves that weren't always the ideal.\r\n\r\n###Results\r\nIn games against each other Crazy Monte dominated all the others. \r\n\r\n![A.I. vs. A.I. Results](http://i.imgur.com/bQnXXnW.png) \r\n\r\nIn games against humans, it won three of six games it played in. \r\n \r\n![A.I. vs Human Results](http://i.imgur.com/DWtYlQJ.png) \r\n\r\nA larger sample size is needed to determine if the A.I. is competitive, but preliminary results look good.\r\n\r\n###The Application\r\n![WPF Application](http://i.imgur.com/HttU5Rb.png) \r\n\r\nThe application is a very simple WPF app is written in C#.  It uses my Liar's Dice library posted [here] (https://bitbucket.org/bennett45/ldlib).  In order to run my tests, I also created a simple console app that uses my Liar's Dice library.\r\n\r\n![Console Application](http://i.imgur.com/PLhpaf7.png)  \r\n\r\nThat console application is posted [here](https://bitbucket.org/bennett45/liars-dice-console). To play, you add a human or a computer player and click \"Start\". Then follow the prompts to know when to roll or take your turn.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}